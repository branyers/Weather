{"version":3,"sources":["data/weatherapi.js","Components/Buttom.js","Components/Loader.js","Components/WeatherBox.js","App.js","index.js"],"names":["getWeatherData","cityname","metric","a","axios","get","data","Buttom","onClick","type","value","Loader","loading","css","size","color","WeatherBox","country","city","icon","grade","min","max","humidity","stateDescripcion","titleGrade","className","src","alt","App","useState","weather","setWeatherData","setCity","setLoading","setmetric","metricTitle","setMetricTitle","handleMetric","getData","useEffect","onChange","e","target","placeholder","name","sys","description","main","temp","temp_min","temp_max","ReactDOM","render","document","getElementById"],"mappings":"6PAOaA,EAAc,uCAAG,WAAOC,EAASC,GAAhB,iBAAAC,EAAA,sEACHC,IAAMC,IAJjB,mDAI4B,YAAQJ,EAAR,kBAA0BC,EAA1B,kBAH7B,qCAEe,uBAClBI,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,wD,OCLdC,EAAS,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpB,OACI,8BACG,uBAAOC,KAAK,SAASD,QAASA,EAASE,MAAM,0B,QCF3CC,EAAS,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAMpB,OACI,8BACI,cAAC,cAAD,CACEC,IAPC,6CAQDC,KAAM,IACNC,MAAQ,OACRH,QAAUA,OCbXI,EAAa,SAAC,GAAsF,IAApFC,EAAmF,EAAnFA,QAASC,EAA0E,EAA1EA,KAAMC,EAAoE,EAApEA,KAAMC,EAA8D,EAA9DA,MAAOC,EAAuD,EAAvDA,IAAKC,EAAkD,EAAlDA,IAAKC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,iBAAiBC,EAAkB,EAAlBA,WAC1F,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAIA,UAAU,YAAd,UACI,+BAAOR,IACP,8BAAMD,OAEV,sBAAKS,UAAU,YAAf,UACI,+BAAON,IACP,uCAAWK,QAGf,sBAAKC,UAAU,OAAf,UACI,qBAAKA,UAAU,8CAA8CC,IAAKR,EAAMS,IAAI,iBAC5E,4CACA,6BAAKJ,IACL,uCAAUH,EAAV,OAAoBI,EAApB,WACaH,EADb,OACuBG,EADvB,gBAEkBF,EAFlB,cCuDDM,MAlEf,WAAgB,IAAD,EACqBC,mBAAS,MAD9B,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAS,iBAFpB,mBAENZ,EAFM,KAEAe,EAFA,OAGiBH,oBAAS,GAH1B,mBAGNlB,EAHM,KAGGsB,EAHH,OAIeJ,mBAAS,UAJxB,mBAIN5B,EAJM,KAIEiC,EAJF,OAKyBL,mBAAS,KALlC,mBAKNM,EALM,KAKOC,EALP,KAOPC,EAAY,uCAAG,sBAAAnC,EAAA,sDACnBgC,EAAU,YACVE,EAAe,KACfL,EAAeD,GACfQ,IAJmB,2CAAH,qDAOZA,EAAO,uCAAG,4BAAApC,EAAA,6DACd+B,GAAW,GADG,SAEKlC,EAAekB,EAAKhB,GAFzB,OAERI,EAFQ,OAGd0B,EAAe1B,GACf4B,GAAW,GAJG,2CAAH,qDAkBb,OAPAM,qBAAU,WAERD,MAEC,IAID,sBAAKb,UAAU,iBAAf,UAEE,uBAAOjB,KAAK,OAAOC,MAAOQ,EAAMuB,SAAU,SAACC,GAAD,OAAOT,EAAQS,EAAEC,OAAOjC,QAAQkC,YAAY,SAASlB,UAAU,eACzG,uBAAOjB,KAAK,SAASD,QAAS,kBAAM+B,KAAW7B,MAAM,WAGpDE,EAAW,qBAAKc,UAAU,mBAAf,SACV,cAAC,EAAD,CAAQd,QAASA,MAGjB,qCACe,OAAZmB,EACC,cAAC,EAAD,CACEb,KAAMa,EAAQc,KACd5B,QAASc,EAAQe,IAAI7B,QACrBE,KAAI,0CAAqCY,EAAQA,QAAQ,GAAGZ,KAAxD,QACJK,iBAAkBO,EAAQA,QAAQ,GAAGgB,YACrC3B,MAAOW,EAAQiB,KAAKC,KACpB5B,IAAKU,EAAQiB,KAAKE,SAClB5B,IAAKS,EAAQiB,KAAKG,SAClB5B,SAAUQ,EAAQiB,KAAKzB,SACvBE,WAAcW,IAGd,KACJ,cAAC,EAAD,CAAQ5B,QAAS8B,WC5D3Bc,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d47f1ed1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\n\r\nconst baseUrl = 'https://api.openweathermap.org/data/2.5/weather?';\r\nconst apiKey = 'ad7d2f658d53c84f2ae8cbfc665adb6e';\r\n\r\nexport const getWeatherData = async (cityname,metric) => {\r\n    const { data } = await axios.get(baseUrl + `q=${cityname}&units=${metric}&appid=${apiKey}`);\r\n    return data;\r\n\r\n}","import React from 'react'\r\n\r\nexport const Buttom = ({onClick}) => {\r\n    return (\r\n        <div>\r\n           <input type=\"button\" onClick={onClick} value=\"Cambiar a Fareheit\"/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {ScaleLoader} from 'react-spinners';\r\n\r\nexport const Loader = ({loading}) => {\r\n\r\n    const style = `\r\n    display: block;\r\n    margin: 0 auto;`;\r\n\r\n    return (\r\n        <div>\r\n            <ScaleLoader\r\n              css={style}\r\n              size={200}\r\n              color= {\"#fff\"}\r\n              loading= {loading}\r\n              />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const WeatherBox = ({ country, city, icon, grade, min, max, humidity, stateDescripcion,titleGrade  }) => {\r\n    return (\r\n        <div className=\"city\">\r\n            <h2 className=\"city-name\">\r\n                <span>{city}</span>\r\n                <sup>{country}</sup>\r\n            </h2>\r\n            <div className=\"city-temp\">\r\n                <span>{grade}</span>\r\n                <sup>&deg;{titleGrade}</sup>\r\n\r\n            </div>\r\n            <div className=\"info\">\r\n                <img className=\"city-icon animate__animated animate__shakeY\" src={icon} alt=\"Clima images\" />\r\n                <p>Descripcion</p>\r\n                <h2>{stateDescripcion}</h2>\r\n                <h2>Min: {min}&deg;{titleGrade}\r\n                    || Max: {max}&deg;{titleGrade}\r\n                    || Humidity: {humidity}%</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { getWeatherData } from './data/weatherapi';\r\nimport {Buttom} from './Components/Buttom'\r\nimport { Loader } from './Components/Loader'\r\nimport { WeatherBox } from './Components/WeatherBox'\r\n\r\nfunction App() {\r\n  const [weather, setWeatherData] = useState(null);\r\n  const [city, setCity] = useState('santo domingo');\r\n  const [loading, setLoading] = useState(false);\r\n  const [metric, setmetric] = useState(\"metric\")\r\n  const [metricTitle, setMetricTitle] = useState(\"C\")\r\n\r\n  const handleMetric = async () =>{\r\n    setmetric(\"imperial\")\r\n    setMetricTitle(\"F\")\r\n    setWeatherData(weather)\r\n    getData()\r\n  }\r\n\r\n  const getData = async () => {\r\n    setLoading(true);\r\n    const data = await getWeatherData(city,metric);\r\n    setWeatherData(data);\r\n    setLoading(false);\r\n\r\n  }\r\n\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n\r\n    getData()\r\n\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"main-container\">\r\n\r\n      <input type=\"text\" value={city} onChange={(e) => setCity(e.target.value)} placeholder=\"Ciudad\" className=\"input-text\" />\r\n      <input type=\"button\" onClick={() => getData()} value=\"Buscar\"/>\r\n\r\n\r\n      {loading ? (<div className=\"loader-container\">\r\n        <Loader loading={loading} />\r\n      </div>\r\n      ) : (\r\n        <>\r\n          {weather !== null ? (\r\n            <WeatherBox \r\n              city={weather.name} \r\n              country={weather.sys.country}\r\n              icon={`http://openweathermap.org/img/w/${weather.weather[0].icon}.png`}\r\n              stateDescripcion={weather.weather[0].description}\r\n              grade={weather.main.temp}\r\n              min={weather.main.temp_min}\r\n              max={weather.main.temp_max}\r\n              humidity={weather.main.humidity}\r\n              titleGrade = {metricTitle}\r\n            />\r\n          \r\n          ) : null}\r\n          <Buttom onClick={handleMetric}/>\r\n        </>\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}